# php концепция
1.один файл index.php помещены в папку или в корень сайта с многоуровневыми подпапками и файлами в них превращает эту директорию в сайт.
2. index.php сканирует все директории с файлами по условию, что они начинаются с двухзначного числа. Создает массив из путей от  к этим файлам. Записывает их  в index.json  
это первая функция файла. Дальше напишу остальные действия.
# Концепция PHP-сайта с автоматическим сканированием директорий

Вот реализация вашей концепции, где `index.php` сканирует директории и создает структуру сайта:

## index.php

```php
<?php
// 1. Функция сканирования директорий и создания массива путей
function scanContentDirectories($rootPath = '.') {
    $content = [];
    
    // Проверяем, существует ли директория
    if (!is_dir($rootPath)) {
        die("Ошибка: Директория не существует");
    }
    
    // Открываем директорию
    $dir = opendir($rootPath);
    
    while (($file = readdir($dir)) !== false) {
        // Пропускаем текущую и родительскую директории
        if ($file == '.' || $file == '..') {
            continue;
        }
        
        $fullPath = $rootPath . DIRECTORY_SEPARATOR . $file;
        
        // Проверяем, соответствует ли имя шаблону (двухзначное число)
        if (is_dir($fullPath) && preg_match('/^\d{2}/', $file)) {
            // Сканируем содержимое поддиректории
            $subItems = scandir($fullPath);
            foreach ($subItems as $subItem) {
                if ($subItem != '.' && $subItem != '..' && !is_dir($fullPath . DIRECTORY_SEPARATOR . $subItem)) {
                    $content[] = [
                        'category' => $file,
                        'file' => $subItem,
                        'path' => $fullPath . DIRECTORY_SEPARATOR . $subItem
                    ];
                }
            }
        }
    }
    
    closedir($dir);
    return $content;
}

// 2. Сохранение массива в index.json
function saveContentToJson($content, $jsonFile = 'index.json') {
    $jsonData = json_encode($content, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
    file_put_contents($jsonFile, $jsonData);
}

// 3. Загрузка содержимого из index.json
function loadContentFromJson($jsonFile = 'index.json') {
    if (!file_exists($jsonFile)) {
        return [];
    }
    
    $jsonData = file_get_contents($jsonFile);
    return json_decode($jsonData, true);
}

// Основная логика
$content = scanContentDirectories();
saveContentToJson($content);

// Дальнейшие действия могут включать:
// - Отображение меню навигации
// - Поиск по контенту
// - Отображение выбранного файла
// - Администрирование контента

// Пример простого отображения
header('Content-Type: text/html; charset=utf-8');
?>
<!DOCTYPE html>
<html>
<head>
    <title>Автоматический сайт</title>
</head>
<body>
    <h1>Содержание сайта</h1>
    <ul>
        <?php foreach ($content as $item): ?>
        <li>
            <a href="<?= htmlspecialchars($item['path']) ?>">
                <?= htmlspecialchars($item['category']) ?> - <?= htmlspecialchars($item['file']) ?>
            </a>
        </li>
        <?php endforeach; ?>
    </ul>
</body>
</html>
```

## Пояснения:

1. **Сканирование директорий**:
   - Функция `scanContentDirectories()` рекурсивно сканирует директории, начиная с корня
   - Отбирает только те папки, которые начинаются с двухзначного числа (регулярное выражение `/^\d{2}/`)
   - Создает массив с информацией о файлах

2. **Сохранение в JSON**:
   - Массив с содержимым сохраняется в файл `index.json`
   - Используется форматирование JSON для удобства чтения

3. **Загрузка из JSON**:
   - Функция для загрузки ранее сохраненных данных

4. **Отображение контента**:
   - Простой пример вывода списка файлов в виде HTML-страницы

## Дальнейшее развитие:

1. Добавьте систему маршрутизации для красивых URL
2. Реализуйте кэширование для ускорения работы
3. Добавьте административный интерфейс для управления контентом
4. Реализуйте поиск по содержимому файлов
5. Добавьте поддержку метаданных для каждого файла (например, заголовок, описание)

Такой подход позволяет быстро создавать структуру сайта, просто добавляя файлы в соответствующие директории без необходимости ручного редактирования меню или навигации.

> далее читаем массив index.json и убираем
> из него все окончания путей где файл.хх 
> и уникализируем его, записываем в массив 
> index-dir.json это массив директорий 
>в которых однозначно будут файлы.
Вот продолжение вашей концепции с добавлением функции для создания массива уникальных директорий:

```php
<?php
// ... предыдущий код из index.php ...

// 4. Функция для получения уникальных директорий из массива путей
function getUniqueDirectories($content) {
    $directories = [];
    
    foreach ($content as $item) {
        // Получаем путь к директории (убираем имя файла из пути)
        $dirPath = dirname($item['path']);
        
        // Добавляем в массив, если еще нет
        if (!in_array($dirPath, $directories)) {
            $directories[] = $dirPath;
        }
    }
    
    return $directories;
}

// 5. Сохранение массива директорий в index-dir.json
function saveDirectoriesToJson($directories, $jsonFile = 'index-dir.json') {
    $jsonData = json_encode($directories, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
    file_put_contents($jsonFile, $jsonData);
}

// Основная логика
$content = scanContentDirectories();
saveContentToJson($content);

// Получаем уникальные директории и сохраняем их
$uniqueDirectories = getUniqueDirectories($content);
saveDirectoriesToJson($uniqueDirectories);

// Выводим информацию
echo "Созданы файлы:<br>";
echo "- index.json (".count($content)." записей)<br>";
echo "- index-dir.json (".count($uniqueDirectories)." уникальных директорий)<br>";

// Пример содержимого index-dir.json
echo "<h2>Список директорий:</h2>";
echo "<pre>";
print_r($uniqueDirectories);
echo "</pre>";
```

## Улучшенная версия с обработкой ошибок:

```php
// 4. Улучшенная функция для получения уникальных директорий
function getUniqueDirectories($content) {
    if (!is_array($content)) {
        throw new InvalidArgumentException("Input must be an array");
    }
    
    $directories = [];
    
    foreach ($content as $item) {
        if (!isset($item['path']) || empty($item['path'])) {
            continue; // Пропускаем элементы без пути
        }
        
        $dirPath = dirname($item['path']);
        
        // Нормализуем путь (убираем ./ и лишние слеши)
        $dirPath = realpath($dirPath);
        
        if ($dirPath !== false && !in_array($dirPath, $directories)) {
            $directories[] = $dirPath;
        }
    }
    
    // Сортируем директории по алфавиту
    sort($directories);
    
    return $directories;
}

// 5. Улучшенная функция сохранения директорий
function saveDirectoriesToJson($directories, $jsonFile = 'index-dir.json') {
    if (!is_array($directories)) {
        throw new InvalidArgumentException("Directories must be an array");
    }
    
    $jsonData = json_encode(
        $directories,
        JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES
    );
    
    if ($jsonData === false) {
        throw new RuntimeException("JSON encoding failed");
    }
    
    $result = file_put_contents($jsonFile, $jsonData);
    
    if ($result === false) {
        throw new RuntimeException("Failed to write to $jsonFile");
    }
    
    return true;
}

// Обработка ошибок
try {
    $content = scanContentDirectories();
    saveContentToJson($content);
    
    $uniqueDirectories = getUniqueDirectories($content);
    saveDirectoriesToJson($uniqueDirectories);
    
    // Вывод информации
    echo "Файлы успешно созданы";
    
} catch (Exception $e) {
    die("Ошибка: " . $e->getMessage());
}
```

## Пояснения:

1. **Функция getUniqueDirectories**:
   - Принимает массив с путями к файлам
   - Для каждого файла получает директорию с помощью `dirname()`
   - Добавляет только уникальные пути в результирующий массив
   - Возвращает отсортированный массив директорий

2. **Функция saveDirectoriesToJson**:
   - Сохраняет массив директорий в формате JSON
   - Использует флаги для красивого форматирования
   - Обрабатывает возможные ошибки

3. **Особенности**:
   - Используется `realpath()` для нормализации путей
   - Добавлена обработка ошибок
   - Пути сохраняются в абсолютном виде
   - Директории сортируются по алфавиту

## Пример содержимого index-dir.json:
```json
[
    "/var/www/site/01_intro",
    "/var/www/site/02_chapters",
    "/var/www/site/03_appendix",
    "/var/www/site/images",
    "/var/www/site/docs"
]
```

Этот подход позволяет:
1. Легко получить список всех директорий с контентом
2. Быстро проверять существование определенных разделов сайта
3. Строить карту сайта на основе реальной структуры файлов
4. Оптимизировать процессы сканирования, используя кэш директорий
